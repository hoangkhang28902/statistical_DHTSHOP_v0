
    // ======== Token Handling =========
    function saveToken() {
      const token = document.getElementById("token").value;
      if (!token) return alert("Vui l√≤ng nh·∫≠p token");
      localStorage.setItem("dht_token", token);
      checkTokenValidity(token);
    }

    function clearToken() {
      localStorage.removeItem("dht_token");
      document.getElementById("token").value = "";
      document.getElementById("token-status").textContent = "ƒê√£ x√≥a token.";
    }

    function loadSavedToken() {
      const token = localStorage.getItem("dht_token");
      if (token) {
        document.getElementById("token").value = token;
        checkTokenValidity(token);
      }
    }

    function checkTokenValidity(token) {
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        const exp = payload.exp;
        const now = Math.floor(Date.now() / 1000);
        if (exp && exp < now) {
          document.getElementById("token-status").textContent = "‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n.";
        } else {
          const expDate = new Date(exp * 1000).toLocaleString();
          document.getElementById("token-status").textContent = `‚úÖ Token h·ª£p l·ªá, h·∫øt h·∫°n l√∫c: ${expDate}`;
        }
      } catch (e) {
        document.getElementById("token-status").textContent = "‚ùå Token kh√¥ng h·ª£p l·ªá.";
      }
    }

    loadSavedToken();

    // ======== SKU c·ªßa Combo, LinkCoffee, Akira =========
    const comboSkus = ["CB-2.5", "CB-5.0", "CB-15", "CB-35", "CB-75", "Cb-150", "CB-300"];
    const linkCoffeeSkus = [
      "DHT_ComTrua", "DHT_BlackCoffee", "DHT-MilkCoffee", "DHT_VietnameseWhiteCoffeeIced",
      "DHT_SaltedCream", "DHT_SaltedCreamCoffee", "DHT_CoconutPandanLatte", "DHT_PandanCoconutMilkTea",
      "DHT_LiptonIcedTea", "DHT_LycheeIcedTea", "DHT_PlumIcedTea", "DHT_PlumIced", "DHT_GuavaIcedTea",
      "DHT_StrawberryTea", "DHT_Lemonade", "DHT_PineappleJuice", "DHT_OrangeJuice", "DHT_PassionFruitJuice",
      "DHT_MixedFruitJuice", "DHT_IceYogurt", "DHT_StrawberryYogurt", "DHT_PeachYogurt"
    ];
    const sanphamchuyendiemSkus = ["001", "002", "003"]; // sku s·∫£n ph·∫©m chuy·ªÉn ƒëi·ªÉm

    // const akiraSkus = []; // Akira s·∫Ω l√† c√°c SKU kh√¥ng thu·ªôc Combo v√† LinkCoffee
    async function fetchAkiraSkus() {
  const token = document.getElementById("token")?.value;
  if (!token) return [];

  const res = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
    headers: { "Authorization": `Bearer ${token}` }
  });

  const json = await res.json();
  const orders = json.data?.array || [];

  const allSkus = new Set();
  orders.forEach(order => {
    const cart = JSON.parse(order.cartSnapshot || "[]");
    cart.forEach(product => {
      const sku = product.productDetail?.sku;
      if (sku) allSkus.add(sku);
    });
  });

  const knownSkus = new Set([
    ...comboSkus,
    ...linkCoffeeSkus,
    ...sanphamchuyendiemSkus
  ]);

  const akiraSkus = Array.from(allSkus).filter(sku => !knownSkus.has(sku));
  console.log("üì¶ akiraSkus:", akiraSkus);
  return akiraSkus;
}


    let validSkus = comboSkus;  // M·∫∑c ƒë·ªãnh l√† Combo
     
    // Function to update validSkus based on selected order type
    function updateValidSkus() {
      const orderType = document.getElementById("orderTypeDropdown").value;
      if (orderType === "combo") {
        validSkus = comboSkus;  // S·ª≠ d·ª•ng SKU c·ªßa Combo
      } else if (orderType === "linkcoffee") {
        validSkus = linkCoffeeSkus;  // S·ª≠ d·ª•ng SKU c·ªßa LinkCoffee
      }
       else if (orderType === "akira") {
        validSkus = akiraSkus;  // Akira kh√¥ng c√≥ SKU m·∫∑c ƒë·ªãnh, ki·ªÉm tra ngo√†i
      }
    }

    // ======== T√≠nh to√°n kho·∫£ng th·ªùi gian 24h c·ªßa m·ªôt ng√†y =========
    function getStartOfDay(dateStr) {
      const date = new Date(dateStr);
      date.setHours(0, 0, 0, 0); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y = 00:00:00
      return date;
    }

    function getEndOfDay(dateStr) {
      const date = new Date(dateStr);
      date.setHours(23, 59, 59, 999); // ƒê·∫∑t gi·ªù, ph√∫t, gi√¢y, mili gi√¢y = 23:59:59
      return date;
    }

    // ======== T√≠nh tu·∫ßn =========
    function getStartEndOfWeek(dateStr) {
      const date = new Date(dateStr);
      const dayOfWeek = date.getDay();
      const startOfWeek = new Date(date);
      startOfWeek.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1)); // T√≠nh th·ª© Hai c·ªßa tu·∫ßn

      const endOfWeek = new Date(startOfWeek);
      endOfWeek.setDate(startOfWeek.getDate() + 6); // C·ªông 6 ng√†y ƒë·ªÉ ƒë∆∞·ª£c Ch·ªß nh·∫≠t

      const formatDate = (d) => `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}`;

      return {
        start: formatDate(startOfWeek),
        end: formatDate(endOfWeek),
      };
    }

    // ======== T·∫£i ng√†y =========
    async function loadDates() {
      const token = document.getElementById("token").value;
      const dropdown = document.getElementById("dateDropdown");
      dropdown.innerHTML = "<option>ƒêang t·∫£i ng√†y...</option>";

      try {
        const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });

        const json = await response.json();
        const orders = json.data?.array || [];

        const uniqueDates = [...new Set(
          orders.map(o => new Date(o.created_at).toISOString().split('T')[0])
        )];

        dropdown.innerHTML = "";
        uniqueDates.sort((a, b) => new Date(b) - new Date(a)).forEach(date => {  
          const option = document.createElement("option");
          option.value = date;
          option.textContent = date;
          dropdown.appendChild(option);
        });

      } catch (err) {
        alert("L·ªói khi t·∫£i danh s√°ch ng√†y: " + err.message);
      }
    }

    function formatDate(dateStr) {
      try {
        const date = new Date(dateStr);
        return `${date.toLocaleTimeString()} ${date.toLocaleDateString('vi-VN')}`;
      } catch {
        return dateStr;
      }
    }

    // ======== T·∫£i tu·∫ßn =========
    async function loadWeeks() {
      const token = document.getElementById("token").value;
      const dropdown = document.getElementById("weekDropdown");
      dropdown.innerHTML = "<option>ƒêang t·∫£i tu·∫ßn...</option>";

      try {
        const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
          headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
          }
        });

        const json = await response.json();
        const orders = json.data?.array || [];

        const uniqueWeeks = [...new Set(
          orders.map(o => {
            const { start, end } = getStartEndOfWeek(o.created_at);
            return `${start} - ${end}`;
          })
        )];

        dropdown.innerHTML = "";
        uniqueWeeks.sort((a, b) => new Date(b.split(' ')[0]) - new Date(a.split(' ')[0])).forEach(week => { 
          const option = document.createElement("option");
          option.value = week;
          option.textContent = week;
          dropdown.appendChild(option);
        });

      } catch (err) {
        alert("L·ªói khi t·∫£i danh s√°ch tu·∫ßn: " + err.message);
      }
    }

    // ======== Xu·∫•t ƒë∆°n h√†ng theo ng√†y =========
async function exportOrders() {
  const token = document.getElementById("token").value;
  const selectedDate = document.getElementById("dateDropdown").value;

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

    const headers = [
       "STT", "M√£ ƒë∆°n h√†ng","Tr·∫°ng th√°i","Lo·∫°i thanh to√°n","T·ªïng ti·ªÅn","Ng∆∞·ªùi duy·ªát","S·ªê ID", "H·ªç v√† t√™n", "Combo", "S·ªë l∆∞·ª£ng",
      "T·ªïng s·ªë combo", "LO·∫†I H√ÄNG", "S·ªê L∆Ø·ª¢NG",
      "ƒê·ªäA CH·ªà NH·∫¨N H√ÄNG", "SƒêT NH·∫¨N H√ÄNG", "GHI CH√ö",
      "Ng√†y mua h√†ng", "NG√ÄY G·ª¨I H√ÄNG"
    ];

    // L·ªçc ƒë∆°n h√†ng theo ng√†y v√† SKU
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const startOfDay = getStartOfDay(selectedDate);
        const endOfDay = getEndOfDay(selectedDate);
        return itemDate >= startOfDay && itemDate <= endOfDay;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        // N·∫øu orderType l√† Akira, l·ªçc SKU kh√¥ng thu·ªôc combo v√† linkcoffee
        if (validSkus === akiraSkus) {
          return cart.some(product => !comboSkus.includes(product.productDetail?.sku) && !linkCoffeeSkus.includes(product.productDetail?.sku));
        } else {
          return cart.some(product => validSkus.includes(product.productDetail?.sku)); // L·ªçc theo SKU Combo ho·∫∑c LinkCoffee
        }
      });

    const rows = filteredOrders.map((item, idx) => {
      const cart = JSON.parse(item.cartSnapshot || "[]");
      
      let adminData = "";
      try {
        adminData = JSON.parse(item.admin); // Gi·∫£i m√£ chu·ªói JSON trong item.admin
      } catch (e) {
        console.error("Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ admin:", e);
      }

      return [
       
        idx + 1,
        item.orderId || "", 
        item.status || "", 
        item.walletName || "",
        item.totalAmount || "",
        adminData.full_name || "",
        item.userPhone || "",
        item.userFullName || "",
        cart[0]?.unitPrice || "",
        cart[0]?.quantity || "",
        "", "", "", 
        item.orderAddress || "",
        item.orderPhone || "",
        "", 
        formatDate(item.created_at),
        ""
      ];
    });

    const csvContent = [
      headers.join(","),
      ...rows.map(r => r.map(field => `"${String(field).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const bom = '\uFEFF';
    const blob = new Blob([bom + csvContent], { type: "text/csv;charset=utf-8;" });
    const urlBlob = URL.createObjectURL(blob);

    const link = document.getElementById("downloadLink");
    const fileName = `orders_${selectedDate}.csv`;
    link.href = urlBlob;
    link.download = fileName;
    link.style.display = "inline";
    link.textContent = `üì• T·∫£i file CSV theo ng√†y: ${selectedDate}`;

  } catch (err) {
    alert("L·ªói t·∫£i ƒë∆°n h√†ng: " + err.message);
  }
}

// ======== Xu·∫•t ƒë∆°n h√†ng theo tu·∫ßn =========
async function exportOrdersByWeek() {
  const token = document.getElementById("token").value;
  const selectedWeek = document.getElementById("weekDropdown").value;

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

     const headers = [
       "STT", "M√£ ƒë∆°n h√†ng","Tr·∫°ng th√°i","Lo·∫°i thanh to√°n","T·ªïng ti·ªÅn","Ng∆∞·ªùi Duy·ªát","S·ªê ID", "H·ªç v√† t√™n", "Combo", "S·ªë l∆∞·ª£ng",
      "T·ªïng s·ªë combo", "LO·∫†I H√ÄNG", "S·ªê L∆Ø·ª¢NG",
      "ƒê·ªäA CH·ªà NH·∫¨N H√ÄNG", "SƒêT NH·∫¨N H√ÄNG", "GHI CH√ö",
      "Ng√†y mua h√†ng", "NG√ÄY G·ª¨I H√ÄNG"
    ];
    // L·ªçc ƒë∆°n h√†ng theo tu·∫ßn v√† SKU
    const filteredOrders = orders
      .filter(item => {
        const { start, end } = getStartEndOfWeek(item.created_at);
        return `${start} - ${end}` === selectedWeek;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        // N·∫øu orderType l√† Akira, l·ªçc SKU kh√¥ng thu·ªôc combo v√† linkcoffee
        if (validSkus === akiraSkus) {
          return cart.some(product => !comboSkus.includes(product.productDetail?.sku) && !linkCoffeeSkus.includes(product.productDetail?.sku));
        } else {
          return cart.some(product => validSkus.includes(product.productDetail?.sku)); // L·ªçc theo SKU Combo ho·∫∑c LinkCoffee
        }
      });

    const rows = filteredOrders.map((item, idx) => {
      const cart = JSON.parse(item.cartSnapshot || "[]");
       let adminData = "";
      try {
        adminData = JSON.parse(item.admin); // Gi·∫£i m√£ chu·ªói JSON trong item.admin
      } catch (e) {
        console.error("Kh√¥ng th·ªÉ gi·∫£i m√£ JSON t·ª´ admin:", e);
      }

      return [
       
        idx + 1,
        item.orderId || "", 
        item.status || "", 
        item.walletName || "",
        item.totalAmount || "",
        adminData.full_name || "",
        item.userPhone || "",
        item.userFullName || "",
        cart[0]?.unitPrice || "",
        cart[0]?.quantity || "",
        "", "", "", 
        item.orderAddress || "",
        item.orderPhone || "",
        "", 
        formatDate(item.created_at),
        ""
      ];
    });
    const csvContent = [
      headers.join(","),
      ...rows.map(r => r.map(field => `"${String(field).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const bom = '\uFEFF';
    const blob = new Blob([bom + csvContent], { type: "text/csv;charset=utf-8;" });
    const urlBlob = URL.createObjectURL(blob);

    const link = document.getElementById("downloadLink");
    const fileName = `orders_week_${selectedWeek.replace(' ', '_')}.csv`;
    link.href = urlBlob;
    link.download = fileName;
    link.style.display = "inline";
    link.textContent = `üì• T·∫£i file CSV theo tu·∫ßn: ${selectedWeek}`;

  } catch (err) {
    alert("L·ªói t·∫£i ƒë∆°n h√†ng: " + err.message);
  }
}

 // ======== T·∫£i s·∫£n ph·∫©m theo danh m·ª•c =========
    async function fetchAndExportProducts() {
      const token = document.getElementById("token").value;
      const selectedCategory = document.getElementById("categoryDropdown").value;
      if (!selectedCategory) {
        alert("Vui l√≤ng ch·ªçn danh m·ª•c!");
        return;
      }
      const limit = 50000;
      let page = 1;
      let allProducts = [];

      try {
        let hasMoreProducts = true;
        while (hasMoreProducts) {
          const url = `https://dhtshop.vn/api/admin/getAllProducts?page=${page}&limit=${limit}`;
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });

          const data = await response.json();

          // L·∫•y ƒë√∫ng m·∫£ng s·∫£n ph·∫©m
          const arr = data.data?.array || [];
          // L·ªçc theo category ƒë√£ ch·ªçn
          const filtered = arr.filter(item => item.category_name === selectedCategory);
          allProducts = allProducts.concat(filtered);

          // N·∫øu s·ªë s·∫£n ph·∫©m tr·∫£ v·ªÅ < limit th√¨ ƒë√£ h·∫øt trang
          if (!arr.length || arr.length < limit) {
            hasMoreProducts = false;
          } else {
            page++;
          }
        }

        if (allProducts.length > 0) {
          exportToCSV(allProducts);
        } else {
          alert("Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o thu·ªôc danh m·ª•c n√†y!");
        }
      } catch (error) {
        alert('L·ªói trong qu√° tr√¨nh g·ª≠i y√™u c·∫ßu: ' + error);
      }
    }

    // ======== Xu·∫•t CSV =========
    function exportToCSV(products) {
      const headers = [
        "STT", "ID", "SKU", "T√™n s·∫£n ph·∫©m", "Gi√°", "Is Show", "Danh m·ª•c", "Danh m·ª•c ph·ª•"
      ];

      const rows = products.map((product, idx) => [
        idx + 1,
        product.id || "",
        product.sku || "",
        product.name || "",
        product.price || "",
        product.isShow || "",
        product.category_name || "",
        product.sub_category_name || "",
      ]);

      const csvContent = [
        headers.join(","),
        ...rows.map(row => row.map(field => `"${String(field).replace(/"/g, '""')}"`).join(","))
      ].join("\n");

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = "dhtshop_products.csv";
      a.click();
    }

// T·∫£i danh m·ª•c t·ª´ s·∫£n ph·∫©m
async function loadCategoriesFromProducts() {
  const token = document.getElementById("token").value;
  const dropdown = document.getElementById("categoryDropdown");
  dropdown.innerHTML = "<option>ƒêang t·∫£i danh m·ª•c...</option>";

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/getAllProducts?page=1&limit=50000", {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    const data = await response.json();
    const products = data.data?.array || [];

    // L·∫•y danh s√°ch c√°c danh m·ª•c s·∫£n ph·∫©m
    const categories = [...new Set(products.map(product => product.category_name))];

    dropdown.innerHTML = ""; // X√≥a c√°c m·ª•c hi·ªán t·∫°i trong dropdown
    const defaultOption = document.createElement("option");
    defaultOption.value = "";
    defaultOption.textContent = "-- Ch·ªçn danh m·ª•c --";
    dropdown.appendChild(defaultOption);

    categories.forEach(category => {
      const option = document.createElement("option");
      option.value = category;
      option.textContent = category;
      dropdown.appendChild(option);
    });

  } catch (err) {
    alert("L·ªói khi t·∫£i danh m·ª•c: " + err.message);
  }
}







// ======== H√†m Th·ªëng K√™ ƒê∆°n H√†ng Combo =========
async function generateComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedDate = document.getElementById("dateDropdown").value;

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

    // L·ªçc ƒë∆°n h√†ng theo ng√†y v√† SKU Combo
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const startOfDay = getStartOfDay(selectedDate);
        const endOfDay = getEndOfDay(selectedDate);
        return itemDate >= startOfDay && itemDate <= endOfDay;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));  // L·ªçc c√°c s·∫£n ph·∫©m thu·ªôc Combo
      });

    // Th·ªëng k√™ ƒë∆°n h√†ng Combo
    let totalComboOrders = 0;
    let totalAmount = 0;
    filteredOrders.forEach(order => {
      totalComboOrders++;
      totalAmount += order.totalAmount || 0;
    });

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ th·ªëng k√™ l√™n giao di·ªán
    document.getElementById("totalComboOrders").textContent = totalComboOrders;
    document.getElementById("totalAmount").textContent = totalAmount.toLocaleString() + " VND";

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo: " + err.message);
  }
}
// ======== L·∫•y danh s√°ch th√°ng t·ª´ API =========
async function loadMonthsFromAPI() {
  const token = document.getElementById("token").value;
  const dropdown = document.getElementById("monthDropdown");

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

    // L·∫•y t·∫•t c·∫£ c√°c th√°ng t·ª´ d·ªØ li·ªáu ƒë∆°n h√†ng
    const months = [...new Set(orders.map(order => {
      const date = new Date(order.created_at);
      return String(date.getMonth() + 1).padStart(2, '0'); // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng 2 ch·ªØ s·ªë
    }))];

    // C·∫≠p nh·∫≠t dropdown th√°ng
    dropdown.innerHTML = ""; // Reset dropdown
    months.forEach(month => {
      const option = document.createElement("option");
      option.value = month;
      option.textContent = `Th√°ng ${month}`;
      dropdown.appendChild(option);
    });

  } catch (err) {
    alert("L·ªói khi t·∫£i danh s√°ch th√°ng: " + err.message);
  }
}

// ======== Th·ªëng k√™ ƒë∆°n h√†ng Combo theo th√°ng =========
async function generateMonthlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedMonth = document.getElementById("monthDropdown").value;

  if (!selectedMonth) {
    alert("Vui l√≤ng ch·ªçn m·ªôt th√°ng ƒë·ªÉ th·ªëng k√™.");
    return;
  }

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];

    // L·ªçc ƒë∆°n h√†ng theo th√°ng v√† SKU Combo
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const month = String(itemDate.getMonth() + 1).padStart(2, '0');  // L·∫•y th√°ng (t·ª´ 0 ƒë·∫øn 11, c·ªông th√™m 1 ƒë·ªÉ ƒë√∫ng th√°ng)
        return month === selectedMonth;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));  // L·ªçc c√°c s·∫£n ph·∫©m thu·ªôc Combo
      });

    // Th·ªëng k√™ ƒë∆°n h√†ng Combo
    let totalComboOrders = 0;
    let totalAmount = 0;
    let totalSuccessOrders = 0;
    let totalCanceledOrders = 0;

    filteredOrders.forEach(order => {
      totalComboOrders++;
      totalAmount += order.totalAmount || 0;

      // Ph√¢n lo·∫°i theo tr·∫°ng th√°i ƒë∆°n h√†ng
      if (order.status === 'success') {
        totalSuccessOrders++;  // ƒê·∫øm ƒë∆°n th√†nh c√¥ng
      } else if (order.status === 'cancel') {
        totalCanceledOrders++;  // ƒê·∫øm ƒë∆°n b·ªã h·ªßy
      }
    });

    // Hi·ªÉn th·ªã k·∫øt qu·∫£ th·ªëng k√™ l√™n giao di·ªán
    document.getElementById("totalComboOrders").textContent = totalComboOrders;
    document.getElementById("totalAmount").textContent = totalAmount.toLocaleString() + " VND";
    document.getElementById("totalSuccessOrders").textContent = totalSuccessOrders;
    document.getElementById("totalCanceledOrders").textContent = totalCanceledOrders;

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo th√°ng: " + err.message);
  }
}


// G·ªçi h√†m loadMonthsFromAPI khi trang ƒë∆∞·ª£c t·∫£i
loadMonthsFromAPI();

// ======== H√†m t·∫£i CSV theo th√°ng =========


let salesChart = null; // Bi·∫øn to√†n c·ª•c ƒë·ªÉ l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng bi·ªÉu ƒë·ªì


// ======== Th·ªëng k√™ ƒë∆°n h√†ng Combo theo th√°ng =========



// Bi·∫øn to√†n c·ª•c l∆∞u d·ªØ li·ªáu b·∫£ng
let salesDataGlobal = {};

async function generateMonthlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedMonth = document.getElementById("monthDropdown").value;
  if (!selectedMonth) return alert("Vui l√≤ng ch·ªçn m·ªôt th√°ng ƒë·ªÉ th·ªëng k√™.");

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const month = String(itemDate.getMonth() + 1).padStart(2, '0');
        return month === selectedMonth;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    let totalComboOrders = 0, totalAmount = 0, totalSuccessOrders = 0, totalCanceledOrders = 0;
    const salesByPerson = {};

    filteredOrders.forEach(order => {
      totalComboOrders++;
      totalAmount += order.totalAmount || 0;
      if (order.status === 'success') totalSuccessOrders++;
      else if (order.status === 'cancel') totalCanceledOrders++;

      const personName = order.userFullName || 'Kh√¥ng x√°c ƒë·ªãnh';
      const phone = order.userPhone || 'Kh√¥ng x√°c ƒë·ªãnh';

      if (!salesByPerson[personName]) {
        salesByPerson[personName] = {
          totalAmount: 0,
          totalOrders: 0,
          userId: phone
        };
      }
      salesByPerson[personName].totalAmount += order.totalAmount || 0;
      salesByPerson[personName].totalOrders += 1;
    });

    document.getElementById("totalComboOrders").textContent = totalComboOrders;
    document.getElementById("totalAmount").textContent = totalAmount.toLocaleString() + " VND";
    document.getElementById("totalSuccessOrders").textContent = totalSuccessOrders;
    document.getElementById("totalCanceledOrders").textContent = totalCanceledOrders;

    renderSalesChart(salesByPerson);
    salesDataGlobal = salesByPerson;
    updateSalesTable();

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo th√°ng: " + err.message);
  }
}

function renderSalesChart(salesByPerson) {
  const topSales = Object.entries(salesByPerson)
    .sort((a, b) => b[1].totalAmount - a[1].totalAmount)
    .slice(0, 10);

  const labels = topSales.map(([name]) => name);
  const data = topSales.map(([, d]) => d.totalAmount);

  const ctx = document.getElementById('salesChart').getContext('2d');

  // H·ªßy bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
  if (window.salesChart?.destroy) window.salesChart.destroy();

  // H√†m ƒë·ªãnh d·∫°ng ƒë∆°n v·ªã ti·ªÅn
  const formatCurrency = value =>
    value >= 1_000_000_000
      ? (value / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' t·ª∑'
      : (value / 1_000_000).toFixed(0) + ' tri·ªáu';

  // V·∫Ω bi·ªÉu ƒë·ªì m·ªõi
  window.salesChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'Doanh thu theo ng∆∞·ªùi (VND)', // Hi·ªán label
        data,
        backgroundColor: '#388E3C',
        borderColor: '#388E3C',
        borderWidth: 1,
        barPercentage: 0.8,
        categoryPercentage: 0.6
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 12,
            padding: 10
          }
        },
       
        tooltip: {
          callbacks: {
            label: ctx => {
              const name = ctx.chart.data.labels[ctx.dataIndex];
              const value = ctx.raw.toLocaleString('vi-VN') + " VND";
              return `${name}: ${value}`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: { display: false },
          grid: { display: false }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: value => formatCurrency(value)
          }
        }
      }
    }
  });
}


function updateSalesTable() {
  const keyword = document.getElementById("salesFilterInput").value.toLowerCase();
  const sortOrder = document.getElementById("sortSelect")?.value || "desc";

  const filtered = Object.entries(salesDataGlobal)
    .filter(([name]) => name.toLowerCase().includes(keyword))
   
    .sort((a, b) => sortOrder === "asc"
      ? a[1].totalAmount - b[1].totalAmount
      : b[1].totalAmount - a[1].totalAmount
    );

  renderSalesTable(filtered);
}



// S·ª± ki·ªán l·ªçc
window.addEventListener("DOMContentLoaded", () => {
  document.getElementById("salesFilterInput").addEventListener("input", updateSalesTable);
  document.getElementById("sortSelect")?.addEventListener("change", updateSalesTable);
  document.getElementById("exportFullCSVButton").addEventListener("click", () => {
    const headers = ["STT", "S·ªë ƒëi·ªán tho·∫°i", "H·ªç v√† t√™n", "S·ªë ƒë∆°n", "T·ªïng gi√° tr·ªã (VND)"];
    const rows = Object.entries(salesDataGlobal).map((item, index) => [
      index + 1,
      item[1].userId,
      item[0],
      item[1].totalOrders,
      item[1].totalAmount
    ]);
    const csvContent = [
      headers.join(","),
      ...rows.map(row => row.map(f => `"${String(f).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `doanhso_thang.csv`;
    a.click();
  });
});

function renderSalesTable(filteredSales) {
  const tbody = document.querySelector("#salesTable tbody");
  const pageSize = 10;
  let currentPage = 1;

  function renderPage(page) {
    currentPage = page;
    tbody.innerHTML = '';
    const start = (page - 1) * pageSize;
    const pageItems = filteredSales.slice(start, start + pageSize);

    pageItems.forEach(([name, data], index) => {
      const row = tbody.insertRow();
      row.innerHTML = `
        <td>${start + index + 1}</td>
        <td>${data.userId}</td>
        <td>${name}</td>
        <td>${data.totalOrders}</td>
        <td>${data.totalAmount.toLocaleString('vi-VN')} VND</td>
      `;
    });

    // Ph√¢n trang d·∫°ng 6 √¥ + ... v√† n√∫t tr∆∞·ªõc/sau
    const totalPages = Math.ceil(filteredSales.length / pageSize);
    const pagination = document.getElementById("salesPagination");
    pagination.innerHTML = '';

    // N√∫t Trang tr∆∞·ªõc
    const prevBtn = document.createElement("button");
    prevBtn.textContent = "Trang tr∆∞·ªõc";
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => renderPage(currentPage - 1);
    pagination.appendChild(prevBtn);

    // N√∫t ph√¢n trang ch√≠nh
    const createBtn = (page, text = page) => {
      const btn = document.createElement("button");
      btn.textContent = text;
      btn.disabled = page === currentPage;
      btn.onclick = () => renderPage(page);
      pagination.appendChild(btn);
    };

    if (totalPages <= 6) {
      for (let i = 1; i <= totalPages; i++) createBtn(i);
    } else {
      createBtn(1);
      if (currentPage > 3) {
        const span = document.createElement("span");
        span.textContent = "...";
        pagination.appendChild(span);
      }
      let start = Math.max(2, currentPage - 1);
      let end = Math.min(totalPages - 1, currentPage + 1);

      if (currentPage <= 3) end = 4;
      if (currentPage >= totalPages - 2) start = totalPages - 3;

      for (let i = start; i <= end; i++) {
        if (i > 1 && i < totalPages) createBtn(i);
      }

      if (currentPage < totalPages - 2) {
        const span = document.createElement("span");
        span.textContent = "...";
        pagination.appendChild(span);
      }
      createBtn(totalPages);
    }

    // N√∫t Trang sau
    const nextBtn = document.createElement("button");
    nextBtn.textContent = "Trang sau";
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => renderPage(currentPage + 1);
    pagination.appendChild(nextBtn);

    // ‚úÖ T√≠nh to√°n th·ªëng k√™
    const totalParticipants = filteredSales.length;
    const countAbove50M = filteredSales.filter(([_, d]) => d.totalAmount >= 50000000).length;
    const percentageAbove50M = totalParticipants > 0
      ? Math.round((countAbove50M / totalParticipants) * 100)
      : 0;

    document.getElementById("totalParticipants").textContent = totalParticipants;
    document.getElementById("percentageAbove50M").textContent = `${percentageAbove50M}%`;
    document.getElementById("above50MInfo").textContent = `(${countAbove50M}/${totalParticipants})`;
  }

  renderPage(currentPage);
}

// file: statistics.js

function handleStatTypeChange() {
  const type = document.getElementById("statTypeDropdown").value;
  const monthDropdown = document.getElementById("monthDropdown");
  const quarterDropdown = document.getElementById("quarterDropdown");
  const yearDropdown = document.getElementById("yearDropdown");

  // Reset visibility
  monthDropdown.style.display = 'none';
  quarterDropdown.style.display = 'none';
  yearDropdown.style.display = 'inline-block';

  if (type === 'month') {
    monthDropdown.style.display = 'inline-block';
  } else if (type === 'quarter') {
    quarterDropdown.style.display = 'inline-block';
  }
}

async function generateStatistics() {
  const type = document.getElementById("statTypeDropdown").value;
  if (type === 'month') {
    await generateMonthlyComboOrderStatistics();
  } else if (type === 'quarter') {
    await generateQuarterlyComboOrderStatistics();
  } else if (type === 'year') {
    await generateYearlyComboOrderStatistics();
  }
}

async function generateQuarterlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedQuarter = document.getElementById("quarterDropdown").value;
  const selectedYear = document.getElementById("yearDropdown").value;
  if (!selectedQuarter || !selectedYear) return alert("Vui l√≤ng ch·ªçn qu√Ω v√† nƒÉm.");

  const [startMonth, endMonth] = {
    'Q1': [0, 2], 'Q2': [3, 5], 'Q3': [6, 8], 'Q4': [9, 11]
  }[selectedQuarter];

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const year = itemDate.getFullYear();
        const month = itemDate.getMonth();
        return year === parseInt(selectedYear) && month >= startMonth && month <= endMonth;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    processStatistics(filteredOrders);

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo qu√Ω: " + err.message);
  }
}

async function generateYearlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedYear = document.getElementById("yearDropdown").value;
  if (!selectedYear) return alert("Vui l√≤ng ch·ªçn nƒÉm.");

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const year = itemDate.getFullYear();
        return year === parseInt(selectedYear);
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    processStatistics(filteredOrders);

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo nƒÉm: " + err.message);
  }
}

function processStatistics(filteredOrders) {
  let totalComboOrders = 0, totalAmount = 0, totalSuccessOrders = 0, totalCanceledOrders = 0;
  const salesByPerson = {};

  filteredOrders.forEach(order => {
    totalComboOrders++;
    totalAmount += order.totalAmount || 0;
    if (order.status === 'success') totalSuccessOrders++;
    else if (order.status === 'cancel') totalCanceledOrders++;

    const personName = order.userFullName || 'Kh√¥ng x√°c ƒë·ªãnh';
    const phone = order.userPhone || 'Kh√¥ng x√°c ƒë·ªãnh';

    if (!salesByPerson[personName]) {
      salesByPerson[personName] = {
        totalAmount: 0,
        totalOrders: 0,
        userId: phone
      };
    }
    salesByPerson[personName].totalAmount += order.totalAmount || 0;
    salesByPerson[personName].totalOrders += 1;
  });

  document.getElementById("totalComboOrders").textContent = totalComboOrders;
  document.getElementById("totalAmount").textContent = totalAmount.toLocaleString() + " VND";
  document.getElementById("totalSuccessOrders").textContent = totalSuccessOrders;
  document.getElementById("totalCanceledOrders").textContent = totalCanceledOrders;

  renderSalesChart(salesByPerson);
  salesDataGlobal = salesByPerson;
  updateSalesTable();
}
// file: statistics.js



function handleStatTypeChange() {
  const type = document.getElementById("statTypeDropdown").value;
  const monthDropdown = document.getElementById("monthDropdown");
  const quarterDropdown = document.getElementById("quarterDropdown");
  const yearDropdown = document.getElementById("yearDropdown");

  monthDropdown.style.display = 'none';
  quarterDropdown.style.display = 'none';
  yearDropdown.style.display = 'none';

  if (type === 'month') {
    monthDropdown.style.display = 'inline-block';
  } else if (type === 'quarter') {
    quarterDropdown.style.display = 'inline-block';
  } else if (type === 'year') {
    yearDropdown.style.display = 'inline-block';
  }
}

async function generateStatistics() {
  const type = document.getElementById("statTypeDropdown").value;
  if (type === 'month') {
    await generateMonthlyComboOrderStatistics();
  } else if (type === 'quarter') {
    await generateQuarterlyComboOrderStatistics();
  } else if (type === 'year') {
    await generateYearlyComboOrderStatistics();
  }
}

async function generateQuarterlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedQuarter = document.getElementById("quarterDropdown").value;
  const selectedYear = new Date().getFullYear();
  if (!selectedQuarter) return alert("Vui l√≤ng ch·ªçn qu√Ω.");

  const [startMonth, endMonth] = {
    'Q1': [0, 2], 'Q2': [3, 5], 'Q3': [6, 8], 'Q4': [9, 11]
  }[selectedQuarter];

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const year = itemDate.getFullYear();
        const month = itemDate.getMonth();
        return year === selectedYear && month >= startMonth && month <= endMonth;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    processStatistics(filteredOrders);

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo qu√Ω: " + err.message);
  }
}

async function generateYearlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedYear = document.getElementById("yearDropdown").value;
  if (!selectedYear) return alert("Vui l√≤ng ch·ªçn nƒÉm.");

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const year = itemDate.getFullYear();
        return year === parseInt(selectedYear);
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    processStatistics(filteredOrders);

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo nƒÉm: " + err.message);
  }
}

async function generateMonthlyComboOrderStatistics() {
  const token = document.getElementById("token").value;
  const selectedMonth = document.getElementById("monthDropdown").value;
  const selectedYear = new Date().getFullYear();
  if (!selectedMonth) return alert("Vui l√≤ng ch·ªçn m·ªôt th√°ng ƒë·ªÉ th·ªëng k√™.");

  try {
    const response = await fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    });

    const json = await response.json();
    const orders = json.data?.array || [];
    const filteredOrders = orders
      .filter(item => {
        const itemDate = new Date(item.created_at);
        const month = String(itemDate.getMonth() + 1).padStart(2, '0');
        const year = itemDate.getFullYear();
        return month === selectedMonth && year === selectedYear;
      })
      .filter(item => {
        const cart = JSON.parse(item.cartSnapshot || "[]");
        return cart.some(product => validSkus.includes(product.productDetail?.sku));
      });

    processStatistics(filteredOrders);

  } catch (err) {
    alert("L·ªói khi th·ªëng k√™ ƒë∆°n h√†ng Combo theo th√°ng: " + err.message);
  }
}


function renderRevenueLineChart(revenueByDate) {
  const ctx = document.getElementById('revenueChart').getContext('2d');
  const labels = Object.keys(revenueByDate).sort();
  const revenueData = labels.map(date => revenueByDate[date]?.totalAmount || 0);
  const orderData = labels.map(date => revenueByDate[date]?.orderCount || 0);

  if (window.revenueChart?.destroy) window.revenueChart.destroy();

  window.revenueChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels,
      datasets: [
        {
          label: 'Doanh thu theo ng√†y',
          data: revenueData,
          fill: false,
          borderColor: 'rgb(77, 192, 75)',
          tension: 0.1,
          yAxisID: 'y'
        },
        {
          label: 'S·ªë l∆∞·ª£ng ƒë∆°n h√†ng',
          data: orderData,
          fill: false,
          borderColor: 'orange',
          tension: 0.1,
          yAxisID: 'y2'
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        tooltip: {
          callbacks: {
            label: ctx => ctx.dataset.label + ': ' + ctx.raw.toLocaleString('vi-VN') + (ctx.dataset.label.includes('Doanh thu') ? ' VND' : ' ƒë∆°n')
          }
        },
        legend: {
          display: true
        }
      },
      scales: {
        x: {
          ticks: {
            display: false
          },
          grid: {
            display: false
          }
        },
        y: {
          beginAtZero: true,
          position: 'left',
          ticks: {
            callback: value => {
              if (value >= 1_000_000_000) return (value / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' t·ª∑';
              if (value >= 1_000_000) return (value / 1_000_000).toFixed(0) + ' tri·ªáu';
              return value.toLocaleString('vi-VN');
            }
          }
        },
        y2: {
          beginAtZero: true,
          position: 'right',
          display: false,
          ticks: {
            stepSize: 1
          },
          grid: {
            drawOnChartArea: false
          }
        }
      }
    }
  });
}

function processStatistics(filteredOrders) {
  let totalComboOrders = 0, totalAmount = 0, totalSuccessOrders = 0, totalCanceledOrders = 0;
  const salesByPerson = {};
  const revenueByDate = {};

  filteredOrders.forEach(order => {
    totalComboOrders++;
    totalAmount += order.totalAmount || 0;
    if (order.status === 'success') totalSuccessOrders++;
    else if (order.status === 'cancel') totalCanceledOrders++;

    const personName = order.userFullName || 'Kh√¥ng x√°c ƒë·ªãnh';
    const phone = order.userPhone || 'Kh√¥ng x√°c ƒë·ªãnh';

    if (!salesByPerson[personName]) {
      salesByPerson[personName] = {
        totalAmount: 0,
        totalOrders: 0,
        userId: phone
      };
    }
    salesByPerson[personName].totalAmount += order.totalAmount || 0;
    salesByPerson[personName].totalOrders += 1;

    const date = new Date(order.created_at).toISOString().split('T')[0];
    if (!revenueByDate[date]) revenueByDate[date] = { totalAmount: 0, orderCount: 0 };
    revenueByDate[date].totalAmount += order.totalAmount || 0;
    revenueByDate[date].orderCount += 1;
  });

  document.getElementById("totalComboOrders").textContent = totalComboOrders;
  document.getElementById("totalAmount").textContent = totalAmount.toLocaleString() + " VND";
  document.getElementById("totalSuccessOrders").textContent = totalSuccessOrders;
  document.getElementById("totalCanceledOrders").textContent = totalCanceledOrders;

  renderSalesChart(salesByPerson);
  renderRevenueLineChart(revenueByDate);
  salesDataGlobal = salesByPerson;
  updateSalesTable();
}



// function showChart(type) {
//   const salesChart = document.getElementById('salesChart');
//   const revenueChart = document.getElementById('revenueChart');

//   salesChart.style.display = type === 'sales' ? 'block' : 'none';
//   revenueChart.style.display = type === 'revenue' ? 'block' : 'none';

//   document.getElementById('btn-sales').classList.toggle('active', type === 'sales');
//   document.getElementById('btn-revenue').classList.toggle('active', type === 'revenue');
// }

function showChart(type) {
  const salesChart = document.getElementById('salesChart');
  const revenueChart = document.getElementById('revenueChart');
  const treeChart = document.getElementById('treeChart');
  const revenueSystemChart = document.getElementById('revenueSystemChart');
  const revenueTeamChart = document.getElementById('revenueTeamChart');

  if (salesChart) salesChart.style.display = type === 'sales' ? 'block' : 'none';
  if (revenueChart) revenueChart.style.display = type === 'revenue' ? 'block' : 'none';
  if (treeChart) treeChart.style.display = type === 'tree' ? 'block' : 'none';
  if (revenueSystemChart) revenueSystemChart.style.display = type === 'revenueSystem' ? 'block' : 'none';
  if (revenueTeamChart) revenueTeamChart.style.display = type === 'revenueTeam' ? 'block' : 'none';

  const btnSales = document.getElementById('btn-sales');
  const btnRevenue = document.getElementById('btn-revenue');
  const btnPeronal = document.getElementById('btn-peronal');
  const btnRevenueSystem = document.getElementById('btn-revenueSystem');
  const btnRevenueTeam = document.getElementById('btn-revenueTeam');

  if (btnSales) btnSales.classList.toggle('active', type === 'sales');
  if (btnRevenue) btnRevenue.classList.toggle('active', type === 'revenue');
  if (btnPeronal) btnPeronal.classList.toggle('active', type === 'tree');
  if (btnRevenueSystem) btnRevenueSystem.classList.toggle('active', type === 'revenueSystem');
  if (btnRevenueTeam) btnRevenueTeam.classList.toggle('active', type === 'revenueTeam');
}



// DOM hi·ªÉn th·ªã qu√Ω v√† nƒÉm

// window.addEventListener("DOMContentLoaded", () => {
//   const monthDropdown = document.getElementById("monthDropdown");
//   const quarterDropdown = document.getElementById("quarterDropdown");
//   const yearDropdown = document.getElementById("yearDropdown");

//   monthDropdown.innerHTML = '<option value="">-- Ch·ªçn th√°ng --</option>';
//   for (let i = 1; i <= 12; i++) {
//     const val = String(i).padStart(2, '0');
//     monthDropdown.innerHTML += `<option value="${val}">${val}</option>`;
//   }

//   quarterDropdown.innerHTML = '<option value="">-- Ch·ªçn qu√Ω --</option>';
//   ['Q1', 'Q2', 'Q3', 'Q4'].forEach(q => {
//     quarterDropdown.innerHTML += `<option value="${q}">${q}</option>`;
//   });

//   yearDropdown.innerHTML = '<option value="">-- Ch·ªçn nƒÉm --</option>';

//   const token = document.getElementById("token")?.value;
//   if (token) {
//     fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=500&status=all", {
//       headers: {
//         "Authorization": `Bearer ${token}`
//       }
//     })
//       .then(res => res.json())
//       .then(json => {
//         const years = [...new Set((json.data?.array || []).map(o => new Date(o.created_at).getFullYear()))].sort((a, b) => b - a);
//         years.forEach(y => {
//           yearDropdown.innerHTML += `<option value="${y}">${y}</option>`;
//         });
//       });
//   }

//   handleStatTypeChange();
// });

window.addEventListener("DOMContentLoaded", () => {
  const statType = document.getElementById("statTypeDropdown");
  const monthDropdown = document.getElementById("monthDropdown");
  const quarterDropdown = document.getElementById("quarterDropdown");
  const yearDropdown = document.getElementById("yearDropdown");
  const token = document.getElementById("token")?.value;

  const today = new Date();
  const currentMonth = String(today.getMonth() + 1).padStart(2, '0');
  const currentYear = today.getFullYear();
  const currentQuarter = `Q${Math.floor(today.getMonth() / 3) + 1}`;

  // M·∫∑c ƒë·ªãnh ch·ªçn "th·ªëng k√™ theo th√°ng"
  statType.value = "month";
  handleStatTypeChange();

  // Kh·ªüi t·∫°o dropdown th√°ng
  monthDropdown.innerHTML = '';
  for (let i = 1; i <= 12; i++) {
    const val = String(i).padStart(2, '0');
    const selected = val === currentMonth ? 'selected' : '';
    monthDropdown.innerHTML += `<option value="${val}" ${selected}>Th√°ng ${val}</option>`;
  }
  
  // Kh·ªüi t·∫°o dropdown qu√Ω
  quarterDropdown.innerHTML = '';
  ['Q1', 'Q2', 'Q3', 'Q4'].forEach(q => {
    const selected = q === currentQuarter ? 'selected' : '';
    quarterDropdown.innerHTML += `<option value="${q}" ${selected}>${q}</option>`;
  });

  // Kh·ªüi t·∫°o dropdown nƒÉm t·ª´ d·ªØ li·ªáu th·ª±c
  if (token) {
    fetch("https://dhtshop.vn/api/admin/orders?page=1&limit=50000&status=all", {
      headers: { "Authorization": `Bearer ${token}` }
    })
    .then(res => res.json())
    .then(json => {
      const years = [...new Set((json.data?.array || []).map(o => new Date(o.created_at).getFullYear()))].sort((a, b) => b - a);
      yearDropdown.innerHTML = '';
      years.forEach(y => {
        const selected = y === currentYear ? 'selected' : '';
        yearDropdown.innerHTML += `<option value="${y}" ${selected}>${y}</option>`;
      });

      // ‚úÖ G·ªçi th·ªëng k√™ ngay sau khi ƒë·ªß d·ªØ li·ªáu
      generateStatistics();
    });
  } else {
    yearDropdown.innerHTML = `<option value="${currentYear}" selected>${currentYear}</option>`;
    generateStatistics();
  }
});

function gotoLinkCoffeeStats() {
  resetChartButtons();
  validSkus = linkCoffeeSkus;
  generateStatistics();
}
async function gotoProductOrderStats() {
  resetChartButtons();
  const akiraSkus = await fetchAkiraSkus();
  validSkus = akiraSkus;
  generateStatistics();
}

function gotoComboStats() {
  resetChartButtons();
  validSkus = comboSkus;
  generateStatistics();
}



// G·ªçi khi nh·∫•n n√∫t "C√¢y Doanh S·ªë"
async function gotoSalesTree() {
  // ·∫®n c√°c n√∫t c≈©
  document.getElementById("btn-sales").style.display = "none";
  document.getElementById("btn-revenue").style.display = "none";

  document.getElementById("salesTable").style.display = "none";
  document.getElementById("salesPagination").style.display = "none";

  document.getElementById("userTable").style.display = "table";
  document.getElementById("userPagination").style.display = "flex";

  document.getElementById("salesFilterInput").style.display = "none";
  document.getElementById("userFilterInput").style.display = "inline-block";

  document.getElementById("sortSelect").style.display = "none";
  document.getElementById("UsersortSelect").style.display = "inline-block";

 

  // Hi·ªán c√°c n√∫t bi·ªÉu ƒë·ªì m·ªõi
  const btnTree = document.getElementById("btn-peronal");
  const btnSystem = document.getElementById("btn-revenueSystem");
  const btnTeam = document.getElementById("btn-revenueTeam");

  btnTree.style.display = "inline-block";
  btnSystem.style.display = "inline-block";
  btnTeam.style.display = "inline-block";

  // ƒê·∫∑t n√∫t m·∫∑c ƒë·ªãnh l√† bi·ªÉu ƒë·ªì c√° nh√¢n
  btnTree.classList.add("active");
  btnSystem.classList.remove("active");
  btnTeam.classList.remove("active");

  showChart("tree");

  const token = document.getElementById("token")?.value;
  if (!token) return alert("Thi·∫øu token");

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { "Authorization": `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];

    // ===== Danh s·ªë C√° nh√¢n =====
    const personalSales = {};
    users
      .filter(u => u.revenuePersonal > 0)
      .sort((a, b) => b.revenuePersonal - a.revenuePersonal)
      .slice(0, 10)
      .forEach(u => {
        const name = u.full_name || u.email || u.phone || "Kh√¥ng x√°c ƒë·ªãnh";
        personalSales[name] = { totalAmount: u.revenuePersonal };
      });
    renderTreeChart(personalSales);

    // ===== Danh s·ªë H·ªá th·ªëng =====
    const systemSales = {};
    users
      .filter(u => u.revenue > 0)
      .sort((a, b) => b.revenue - a.revenue)
      .slice(0, 10)
      .forEach(u => {
        const name = u.full_name || u.email || u.phone || "Kh√¥ng x√°c ƒë·ªãnh";
        systemSales[name] = { totalAmount: u.revenue };
      });
    renderRevenueSystemChart(systemSales);

    // ===== Danh s·ªë ƒê·ªôi nh√≥m =====
    renderRevenueTeamChart(users);

    // Th·ªëng k√™ t·ªïng h·ª£p
    updateRevenueSystemStats(users);
    document.getElementById("statistics").style.display = "none";
    document.getElementById("statisticsRevenue").style.display = "block";
   

  } catch (err) {
    console.error("L·ªói c√¢y doanh s·ªë:", err);
    alert("L·ªói khi t·∫£i c√¢y doanh s·ªë");
  }
}


function renderTreeChart(salesByPerson) {
  const topSales = Object.entries(salesByPerson)
    .sort((a, b) => b[1].totalAmount - a[1].totalAmount)
    .slice(0, 10);

  const labels = topSales.map(([name]) => name);
  const data = topSales.map(([, d]) => d.totalAmount);

  const ctx = document.getElementById('treeChart').getContext('2d');

  if (window.treeChart?.destroy) window.treeChart.destroy();

  const formatCurrency = value =>
    value >= 1_000_000_000
      ? (value / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' t·ª∑'
      : (value / 1_000_000).toFixed(0) + ' tri·ªáu';

  window.treeChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'Doanh s·ªë c√° nh√¢n (VND)',
        data,
        backgroundColor: '#FF9800',
        borderColor: '#FF9800',
        borderWidth: 1,
        barPercentage: 0.8,
        categoryPercentage: 0.6
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 12,
            padding: 10
          }
        },
        tooltip: {
          callbacks: {
            label: ctx => {
              const name = ctx.chart.data.labels[ctx.dataIndex];
              const value = ctx.raw.toLocaleString('vi-VN') + " VND";
              return `${name}: ${value}`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: { display: false },
          grid: { display: false }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: value => formatCurrency(value)
          }
        }
      }
    }
  });
}

function resetChartButtons() {
  document.getElementById("btn-sales").style.display = "inline-block";
  document.getElementById("btn-revenue").style.display = "inline-block";
  document.getElementById("statistics").style.display = "grid";
  document.getElementById("btn-peronal").style.display = "none";
  document.getElementById("btn-revenueSystem").style.display = "none";
  document.getElementById("btn-revenueTeam").style.display = "none";
  document.getElementById("statisticsRevenue").style.display = "none";
    document.getElementById("salesTable").style.display = "table";
  document.getElementById("salesPagination").style.display = "flex";

  document.getElementById("userTable").style.display = "none";
  document.getElementById("userPagination").style.display = "none";

  document.getElementById("salesFilterInput").style.display = "inline-block";
  document.getElementById("userFilterInput").style.display = "none";

    document.getElementById("sortSelect").style.display = "inline-block";
  document.getElementById("UsersortSelect").style.display = "none";

}





// G·ªçi khi nh·∫•n n√∫t "Danh s·ªë h·ªá th·ªëng"
async function gotoRevenueSystem() {
  const token = document.getElementById("token")?.value;
  if (!token) return alert("Thi·∫øu token");

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { "Authorization": `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];

    const topUsers = users
      .filter(u => u.revenue > 0)
      .sort((a, b) => b.revenue - a.revenue)
      .slice(0, 10);

    const salesSystem = {};
    topUsers.forEach(u => {
      const name = u.full_name || u.email || u.phone || 'Kh√¥ng x√°c ƒë·ªãnh';
      salesSystem[name] = { totalAmount: u.revenue };
    });

    renderRevenueSystemChart(salesSystem);
    showChart("revenueSystem");
  } catch (err) {
    console.error("L·ªói c√¢y doanh s·ªë:", err);
    alert("L·ªói khi t·∫£i c√¢y doanh s·ªë");
  }
}


function renderRevenueSystemChart(salesSystem) {
  const topSales = Object.entries(salesSystem)
    .sort((a, b) => b[1].totalAmount - a[1].totalAmount)
    .slice(0, 10);

  const labels = topSales.map(([name]) => name);
  const data = topSales.map(([, d]) => d.totalAmount);

  const ctx = document.getElementById('revenueSystemChart').getContext('2d');

  if (window.revenueSystemChart?.destroy) window.revenueSystemChart.destroy();

  const formatCurrency = value =>
    value >= 1_000_000_000
      ? (value / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' t·ª∑'
      : (value / 1_000_000).toFixed(0) + ' tri·ªáu';

  window.revenueSystemChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'Doanh s·ªë h·ªá th·ªëng (VND)',
        data,
        backgroundColor: '#388E3C',
        borderColor: '#388E3C',
        borderWidth: 1,
        barPercentage: 0.8,
        categoryPercentage: 0.6
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 12,
            padding: 10
          }
        },
        tooltip: {
          callbacks: {
            label: ctx => {
              const name = ctx.chart.data.labels[ctx.dataIndex];
              const value = ctx.raw.toLocaleString('vi-VN') + " VND";
              return `${name}: ${value}`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: { display: false },
          grid: { display: false }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: value => formatCurrency(value)
          }
        }
      }
    }
  });
}

function renderRevenueTeamChart(users) {
  const topUsers = [...users]
    .filter(u => u.revenueTeam > 0)
    .sort((a, b) => b.revenueTeam - a.revenueTeam)
    .slice(0, 10);

  const labels = topUsers.map(u => u.full_name || u.phone || 'Kh√¥ng t√™n');
  const data = topUsers.map(u => u.revenueTeam);

  const ctx = document.getElementById('revenueTeamChart').getContext('2d');

  if (window.revenueTeamChart?.destroy) window.revenueTeamChart.destroy();

  const formatCurrency = value =>
    value >= 1_000_000_000
      ? (value / 1_000_000_000).toFixed(1).replace(/\.0$/, '') + ' t·ª∑'
      : (value / 1_000_000).toFixed(0) + ' tri·ªáu';

  window.revenueTeamChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels,
      datasets: [{
        label: 'Danh s·ªë ƒë·ªôi nh√≥m (VND)',
        data,
        backgroundColor: '#3F51B5',
        borderColor: '#3F51B5',
        borderWidth: 1,
        barPercentage: 0.8,
        categoryPercentage: 0.6
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: true,
          position: 'top',
          labels: {
            boxWidth: 12,
            padding: 10
          }
        },
        tooltip: {
          callbacks: {
            label: ctx => {
              const name = ctx.chart.data.labels[ctx.dataIndex];
              const value = ctx.raw.toLocaleString('vi-VN') + " VND";
              return `${name}: ${value}`;
            }
          }
        }
      },
      scales: {
        x: {
          ticks: { display: false },
          grid: { display: false }
        },
        y: {
          beginAtZero: true,
          ticks: {
            callback: value => formatCurrency(value)
          }
        }
      }
    }
  });
}

function gotoRevenueTeamChart() {
  const token = document.getElementById("token")?.value;
  if (!token) return;

  fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
    headers: { Authorization: `Bearer ${token}` }
  })
    .then(res => res.json())
    .then(json => {
      const users = json.data?.array || [];
      renderRevenueTeamChart(users);
      showChart('revenueTeam');
    });
}


// // T·∫£i file danh s·ªë c√° nh√¢n
async function downloadPersonalRevenueCSV() {
  const token = document.getElementById("token")?.value;
  if (!token) return alert("Thi·∫øu token");

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { Authorization: `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];

    const filtered = users.filter(u => (u.maxOut || 0) > 0);

    const headers = ["STT", "H·ªç v√† t√™n", "S·ªë ƒëi·ªán tho·∫°i", "Maxout (VND)"];
    const rows = filtered.map((u, idx) => [
      idx + 1,
      u.full_name || "",
      u.phone || "",
      Math.round(u.maxOut || 0).toLocaleString("vi-VN")
    ]);

    const csvContent = [
      headers.join(","),
      ...rows.map(row => row.map(f => `"${String(f).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "danh_sach_maxout.csv";
    a.click();
  } catch (err) {
    console.error("L·ªói khi t·∫£i danh s√°ch maxout:", err);
    alert("Kh√¥ng th·ªÉ xu·∫•t danh s√°ch maxout.");
  }
}

async function downloadMaxoutCSV() {
  const token = document.getElementById("token")?.value;
  if (!token) return alert("Thi·∫øu token");

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { Authorization: `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];

    const filtered = users.filter(u => (u.maxOut || 0) > 0);

    const headers = ["STT", "H·ªç v√† t√™n", "S·ªë ƒëi·ªán tho·∫°i", "Maxout (VND)"];
    const rows = filtered.map((u, idx) => [
      idx + 1,
      u.full_name || "",
      u.phone || "",
      Math.round(u.maxOut || 0).toLocaleString("vi-VN")
    ]);

    const csvContent = [
      headers.join(","),
      ...rows.map(row => row.map(f => `"${String(f).replace(/"/g, '""')}"`).join(","))
    ].join("\n");

    const blob = new Blob(["\uFEFF" + csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");
    a.href = url;
    a.download = "danh_sach_maxout.csv";
    a.click();
  } catch (err) {
    console.error("L·ªói khi t·∫£i danh s√°ch maxout:", err);
    alert("Kh√¥ng th·ªÉ xu·∫•t danh s√°ch maxout.");
  }
}


async function fetchAndUpdateRevenueSystemStats() {
  const token = document.getElementById("token")?.value;
  if (!token) return alert("Thi·∫øu token");

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { Authorization: `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];

    updateRevenueSystemStats(users);

   
  } catch (err) {
    console.error("L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", err);
    alert("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªëng k√™.");
  }
}

function updateRevenueSystemStats(users) {
  const totalAccounts = users.length;

  const totalPersonalRevenueRaw = users.reduce((sum, u) => sum + (u.revenuePersonal || 0), 0);
  const totalPersonalRevenue = Math.round(totalPersonalRevenueRaw); // ‚úÖ L√†m tr√≤n t·ªïng cu·ªëi c√πng

  const activeAccounts = users.filter(u => (u.revenuePersonal || 0) > 0);
  const activeRate = totalAccounts > 0
    ? Math.round((activeAccounts.length / totalAccounts) * 100)
    : 0;

  const above50M = users.filter(u => (u.revenuePersonal || 0) >= 50000000).length;
  const multiLevelUsers = users.filter(u => (u.priority || 0) >= 2).length;

  const totalMaxoutRaw = users.reduce((sum, u) => sum + (u.maxOut || 0), 0);
  const totalMaxout = Math.round(totalMaxoutRaw); // ‚úÖ L√†m tr√≤n t·ªïng cu·ªëi c√πng


  document.getElementById("totalPersonalRevenue").textContent =
    totalPersonalRevenue.toLocaleString('vi-VN') + " VND";

  document.getElementById("totalAccounts").textContent = totalAccounts + " T√†i Kho·∫£n";

  document.getElementById("activeTransactionRate").textContent = `${activeRate}%`;
  document.getElementById("activeTransactionInfo").textContent =
    `(${activeAccounts.length}/${totalAccounts})`;

  document.getElementById("above50PercentPersonal").textContent =
    above50M + " T√†i Kho·∫£n";

  document.getElementById("multiLevelUsers").textContent =
    multiLevelUsers + " T√†i Kho·∫£n";

  document.getElementById("totalMaxout").textContent =
    totalMaxout.toLocaleString('vi-VN') + " VND";
}

async function loadUserTable() {
  const token = document.getElementById("token")?.value;
  if (!token) {
    alert("Vui l√≤ng nh·∫≠p token!");
    return;
  }

  const tableBody = document.querySelector("#userTable tbody");
  const pagination = document.getElementById("userPagination");
  tableBody.innerHTML = '<tr><td colspan="11">ƒêang t·∫£i...</td></tr>';

  try {
    const res = await fetch("https://dhtshop.vn/api/admin/getAllUsers?page=1&limit=50000", {
      headers: { "Authorization": `Bearer ${token}` }
    });

    const json = await res.json();
    const users = json.data?.array || [];
    

    if (!users.length) {
      tableBody.innerHTML = '<tr><td colspan="11">Kh√¥ng c√≥ d·ªØ li·ªáu</td></tr>';
      return;
    }

    const pageSize = 10;
    let currentPage = 1;

    const renderPage = (page) => {
      currentPage = page;
      tableBody.innerHTML = '';
      const start = (page - 1) * pageSize;
      const pageItems = users.slice(start, start + pageSize);

      pageItems.forEach((u, idx) => {
        const row = tableBody.insertRow();
        row.innerHTML = `
          <td>${start + idx + 1}</td>
          <td>${u.phone || ""}</td>
          <td>${u.full_name || ""}</td>
          <td>${u.refBy || ""}</td>
          <td>${u.level ?? ""}</td>
          <td>${u.f1Count ?? ""}</td>
          <td>${u.priority ?? ""}</td>
           <td>${(u.revenue ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.revenueTeam ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.revenuePersonal ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.maxOut ?? 0).toLocaleString('vi-VN')} VND</td>
        `;
      });
      window.allUsers = users;
      renderPagination();
    };

    const renderPagination = () => {
      const totalPages = Math.ceil(users.length / pageSize);
      pagination.innerHTML = '';

      // N√∫t Trang tr∆∞·ªõc
      const prevBtn = document.createElement("button");
      prevBtn.textContent = "Trang tr∆∞·ªõc";
      prevBtn.disabled = currentPage === 1;
      prevBtn.onclick = () => renderPage(currentPage - 1);
      pagination.appendChild(prevBtn);

      const createBtn = (page, text = page) => {
        const btn = document.createElement("button");
        btn.textContent = text;
        btn.disabled = page === currentPage;
        btn.onclick = () => renderPage(page);
        pagination.appendChild(btn);
      };

      if (totalPages <= 6) {
        for (let i = 1; i <= totalPages; i++) createBtn(i);
      } else {
        createBtn(1);
        if (currentPage > 3) {
          const span = document.createElement("span");
          span.textContent = "...";
          pagination.appendChild(span);
        }
        let start = Math.max(2, currentPage - 1);
        let end = Math.min(totalPages - 1, currentPage + 1);

        if (currentPage <= 3) end = 4;
        if (currentPage >= totalPages - 2) start = totalPages - 3;

        for (let i = start; i <= end; i++) {
          if (i > 1 && i < totalPages) createBtn(i);
        }

        if (currentPage < totalPages - 2) {
          const span = document.createElement("span");
          span.textContent = "...";
          pagination.appendChild(span);
        }
        createBtn(totalPages);
      }

      // N√∫t Trang sau
      const nextBtn = document.createElement("button");
      nextBtn.textContent = "Trang sau";
      nextBtn.disabled = currentPage === totalPages;
      nextBtn.onclick = () => renderPage(currentPage + 1);
      pagination.appendChild(nextBtn);
    };

    renderPage(currentPage);
    

  } catch (err) {
    tableBody.innerHTML = `<tr><td colspan="11">L·ªói t·∫£i d·ªØ li·ªáu: ${err.message}</td></tr>`;
  }
}
document.addEventListener("DOMContentLoaded", loadUserTable);

// T·∫£i table User

function downloadAllUsersAsCSV() {
  const users = window.allUsers || [];
  if (!users.length) {
    alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫£i xu·ªëng.");
    return;
  }
  const headers = [
    "STT", "S·ªë ƒëi·ªán tho·∫°i", "H·ªç v√† t√™n", "RefBy", "Level", "F1 Count",
    "Priority", "Doanh s·ªë h·ªá th·ªëng", "Doanh s·ªë ƒë·ªôi nh√≥m", "Doanh s·ªë c√° nh√¢n", "MaxOut"
  ];
  const rows = users.map((u, idx) => [
    idx + 1,
    u.phone || "",
    u.full_name || "",
    u.refBy || "",
    u.level ?? "",
    u.f1Count ?? "",
    u.priority ?? "",
    u.revenue ?? 0,
    u.revenueTeam ?? 0,
    u.revenuePersonal ?? 0,
    u.maxOut ?? 0
  ].map(val => `"${String(val).replace(/"/g, '""')}"`).join(","));
  const csvContent = [
    headers.map(h => `"${h.replace(/"/g, '""')}"`).join(","),
    ...rows
  ].join("\n");
  const bom = '\uFEFF';
  const blob = new Blob([bom + csvContent], { type: "text/csv;charset=utf-8;" });
  const urlBlob = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = urlBlob;
  link.download = `user_table_all_${new Date().toISOString().slice(0, 10)}.csv`;
  link.click();
}


function updateUserTable() {
  const keyword = document.getElementById("userFilterInput").value.trim().toLowerCase();
  const sortSelect = document.getElementById("UsersortSelect");
  const sortValue = sortSelect ? sortSelect.selectedIndex : 0;

  let filtered = window.allUsers || [];
  if (keyword) {
    filtered = filtered.filter(user => {
      const name = (user.full_name || "").toLowerCase();
      const phone = (user.phone || "").toLowerCase();
      const refBy = (user.refBy || "").toLowerCase();
      return name.includes(keyword) || phone.includes(keyword) || refBy.includes(keyword);
    });
  }

  // S·∫Øp x·∫øp theo l·ª±a ch·ªçn c·ªßa user
  filtered.sort((a, b) => {
    switch (sortValue) {
      case 1: // F1 Count
        return (b.f1Count || 0) - (a.f1Count || 0);
      case 2: // ƒê·ªô ∆∞u ti√™n
        return (b.priority || 0) - (a.priority || 0);
      case 3: // DS h·ªá th·ªëng
        return (b.revenue || 0) - (a.revenue || 0);
      case 4: // DS ƒë·ªôi nh√≥m
        return (b.revenueTeam || 0) - (a.revenueTeam || 0);
      case 5: // DS c√° nh√¢n
        return (b.revenuePersonal || 0) - (a.revenuePersonal || 0);
      case 6: // Maxout
        return (b.maxOut || 0) - (a.maxOut || 0);
      case 0: // Level (LV)
      default:
        return (b.level || 0) - (a.level || 0);
    }
  });

  window.filteredUsers = filtered;
  renderUserTable(filtered, 1);
}


function renderUserTable(users, page = 1) {
  const tableBody = document.querySelector("#userTable tbody");
  const pagination = document.getElementById("userPagination");
  const pageSize = 10;
  const totalPages = Math.ceil(users.length / pageSize);
  let currentPage = Math.max(1, Math.min(page, totalPages || 1));
  tableBody.innerHTML = '';

  const start = (currentPage - 1) * pageSize;
  const pageItems = users.slice(start, start + pageSize);

  pageItems.forEach((u, idx) => {
    const row = tableBody.insertRow();
    row.innerHTML = `
      <td>${start + idx + 1}</td>
      <td>${u.phone || ""}</td>
      <td>${u.full_name || ""}</td>
      <td>${u.refBy || ""}</td>
      <td>${u.level ?? ""}</td>
      <td>${u.f1Count ?? ""}</td>
      <td>${u.priority ?? ""}</td>
        <td>${(u.revenue ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.revenueTeam ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.revenuePersonal ?? 0).toLocaleString('vi-VN')} VND</td>
    <td>${(u.maxOut ?? 0).toLocaleString('vi-VN')} VND</td>
    `;
  });

  // Render pagination (d·∫°ng r√∫t g·ªçn 6 √¥ nh∆∞ code c≈© c·ªßa b·∫°n)
  pagination.innerHTML = '';
  if (totalPages > 1) {
    // Trang tr∆∞·ªõc
    const prevBtn = document.createElement("button");
    prevBtn.textContent = "Trang tr∆∞·ªõc";
    prevBtn.disabled = currentPage === 1;
    prevBtn.onclick = () => renderUserTable(users, currentPage - 1);
    pagination.appendChild(prevBtn);

    const createBtn = (p, label = p) => {
      const btn = document.createElement("button");
      btn.textContent = label;
      btn.disabled = p === currentPage;
      btn.onclick = () => renderUserTable(users, p);
      pagination.appendChild(btn);
    };

    if (totalPages <= 6) {
      for (let i = 1; i <= totalPages; i++) createBtn(i);
    } else {
      createBtn(1);
      if (currentPage > 3) {
        const span = document.createElement("span");
        span.textContent = "...";
        pagination.appendChild(span);
      }
      let start = Math.max(2, currentPage - 1);
      let end = Math.min(totalPages - 1, currentPage + 1);

      if (currentPage <= 3) end = 4;
      if (currentPage >= totalPages - 2) start = totalPages - 3;

      for (let i = start; i <= end; i++) {
        if (i > 1 && i < totalPages) createBtn(i);
      }

      if (currentPage < totalPages - 2) {
        const span = document.createElement("span");
        span.textContent = "...";
        pagination.appendChild(span);
      }
      createBtn(totalPages);
    }

    // Trang sau
    const nextBtn = document.createElement("button");
    nextBtn.textContent = "Trang sau";
    nextBtn.disabled = currentPage === totalPages;
    nextBtn.onclick = () => renderUserTable(users, currentPage + 1);
    pagination.appendChild(nextBtn);
  }
}
document.getElementById("userFilterInput").addEventListener("input", updateUserTable);
document.getElementById("UsersortSelect").addEventListener("change", updateUserTable);

function setActiveMenu(button) {
  // X√≥a active ·ªü m·ªçi n√∫t
  document.querySelectorAll('.menu-btn').forEach(btn => btn.classList.remove('active'));
  // G√°n active cho n√∫t v·ª´a b·∫•m
  button.classList.add('active');
}